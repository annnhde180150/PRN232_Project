'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '../../contexts/AuthContext';
import { reportAPI } from '../../lib/api';
import {
  BusinessOverview,
  RevenueAnalytics,
  ServicePerformance,
  HelperRanking,
  BookingAnalytics,
  ReportPeriod
} from '../../types/reports';
import StatCard from '../../components/charts/StatCard';
import SimpleChart from '../../components/charts/SimpleChart';
import PeriodSelector from '../../components/charts/PeriodSelector';

export default function AdminReportsPage() {
  const { userType, isAuthenticated, loading } = useAuth();
  const router = useRouter();
  const [selectedPeriod, setSelectedPeriod] = useState<ReportPeriod>('month');
  const [activeTab, setActiveTab] = useState<'overview' | 'revenue' | 'services' | 'helpers' | 'bookings'>('overview');
  
  // Data states
  const [businessOverview, setBusinessOverview] = useState<BusinessOverview | null>(null);
  const [revenueAnalytics, setRevenueAnalytics] = useState<RevenueAnalytics | null>(null);
  const [servicePerformance, setServicePerformance] = useState<ServicePerformance[]>([]);
  const [helperRankings, setHelperRankings] = useState<HelperRanking[]>([]);
  const [bookingAnalytics, setBookingAnalytics] = useState<BookingAnalytics | null>(null);
  
  // Loading states
  const [loadingData, setLoadingData] = useState(true);
  const [error, setError] = useState<string>('');

  useEffect(() => {
    if (!loading && (!isAuthenticated || userType !== 'admin')) {
      router.push('/login');
    }
  }, [isAuthenticated, userType, loading, router]);

  useEffect(() => {
    if (isAuthenticated && userType === 'admin') {
      loadAllData();
    }
  }, [isAuthenticated, userType, selectedPeriod]);

  const loadAllData = async () => {
    setLoadingData(true);
    setError('');
    
    try {
      const [overview, revenue, services, helpers, bookings] = await Promise.all([
        reportAPI.getBusinessOverview(),
        reportAPI.getRevenueAnalytics(selectedPeriod),
        reportAPI.getServicePerformance(selectedPeriod),
        reportAPI.getHelperRankings(10, selectedPeriod),
        reportAPI.getBookingAnalytics(undefined, selectedPeriod)
      ]);

      setBusinessOverview(overview.data);
      setRevenueAnalytics(revenue.data);
      setServicePerformance(services.data);
      setHelperRankings(helpers.data);
      setBookingAnalytics(bookings.data);
    } catch (err: any) {
      setError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu b√°o c√°o. Vui l√≤ng th·ª≠ l·∫°i.');
      console.error('Error loading reports:', err);
    } finally {
      setLoadingData(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600"></div>
      </div>
    );
  }

  if (!isAuthenticated || userType !== 'admin') {
    return null;
  }

  const renderOverviewTab = () => (
    <div className="space-y-6">
      {/* Key Metrics */}
      {businessOverview && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <StatCard
            title="T·ªïng Ng∆∞·ªùi D√πng"
            value={businessOverview.totalUsers}
            icon={<span className="text-xl">üë•</span>}
            color="blue"
            trend={{
              value: businessOverview.growthMetrics.userGrowthRate,
              isPositive: businessOverview.growthMetrics.userGrowthRate > 0
            }}
          />
          <StatCard
            title="T·ªïng Ng∆∞·ªùi Gi√∫p Vi·ªác"
            value={businessOverview.totalHelpers}
            icon={<span className="text-xl">üè†</span>}
            color="green"
            trend={{
              value: businessOverview.growthMetrics.helperGrowthRate,
              isPositive: businessOverview.growthMetrics.helperGrowthRate > 0
            }}
          />
          <StatCard
            title="T·ªïng ƒê·∫∑t L·ªãch"
            value={businessOverview.totalBookings}
            icon={<span className="text-xl">üìÖ</span>}
            color="purple"
            trend={{
              value: businessOverview.growthMetrics.bookingGrowthRate,
              isPositive: businessOverview.growthMetrics.bookingGrowthRate > 0
            }}
          />
          <StatCard
            title="T·ªïng Doanh Thu"
            value={`${businessOverview.totalRevenue.toLocaleString()}ƒë`}
            icon={<span className="text-xl">üí∞</span>}
            color="orange"
            trend={{
              value: businessOverview.growthMetrics.revenueGrowthRate,
              isPositive: businessOverview.growthMetrics.revenueGrowthRate > 0
            }}
          />
        </div>
      )}

      {/* Booking Status */}
      {businessOverview && (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <StatCard
            title="ƒê·∫∑t L·ªãch Ho·∫°t ƒê·ªông"
            value={businessOverview.activeBookings}
            subtitle="ƒêang th·ª±c hi·ªán"
            color="green"
          />
          <StatCard
            title="ƒê·∫∑t L·ªãch Ho√†n Th√†nh"
            value={businessOverview.completedBookings}
            subtitle="ƒê√£ ho√†n th√†nh"
            color="blue"
          />
          <StatCard
            title="ƒê·∫∑t L·ªãch B·ªã H·ªßy"
            value={businessOverview.cancelledBookings}
            subtitle="ƒê√£ h·ªßy"
            color="red"
          />
        </div>
      )}

      {/* Service Quality */}
      {businessOverview && (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <StatCard
            title="ƒê√°nh Gi√° Trung B√¨nh"
            value={`${businessOverview.averageRating}/5`}
            subtitle="‚≠ê Sao"
            color="orange"
          />
          <StatCard
            title="T·ªïng D·ªãch V·ª•"
            value={businessOverview.totalServices}
            subtitle="D·ªãch v·ª• kh·∫£ d·ª•ng"
            color="purple"
          />
          <StatCard
            title="T·ªïng ƒê√°nh Gi√°"
            value={businessOverview.totalReviews}
            subtitle="L∆∞·ª£t ƒë√°nh gi√°"
            color="gray"
          />
        </div>
      )}
    </div>
  );

  const renderRevenueTab = () => (
    <div className="space-y-6">
      {revenueAnalytics && (
        <>
          {/* Revenue Metrics */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <StatCard
              title="T·ªïng Doanh Thu"
              value={`${revenueAnalytics.totalRevenue.toLocaleString()}ƒë`}
              color="green"
            />
            <StatCard
              title="Doanh Thu R√≤ng"
              value={`${revenueAnalytics.netRevenue.toLocaleString()}ƒë`}
              color="blue"
            />
            <StatCard
              title="Ph√≠ N·ªÅn T·∫£ng"
              value={`${revenueAnalytics.platformFees.toLocaleString()}ƒë`}
              color="purple"
            />
            <StatCard
              title="Thu Nh·∫≠p Helper"
              value={`${revenueAnalytics.helperEarnings.toLocaleString()}ƒë`}
              color="orange"
            />
          </div>

          {/* Transaction Metrics */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <StatCard
              title="T·ªïng Giao D·ªãch"
              value={revenueAnalytics.totalTransactions}
              color="blue"
            />
            <StatCard
              title="Gi√° Tr·ªã TB/Giao D·ªãch"
              value={`${revenueAnalytics.averageTransactionValue.toLocaleString()}ƒë`}
              color="green"
            />
            <StatCard
              title="T·ª∑ L·ªá Th√†nh C√¥ng"
              value={`${revenueAnalytics.paymentSuccessRate}%`}
              color="purple"
            />
          </div>

          {/* Monthly Trend Chart */}
          {revenueAnalytics.monthlyTrend.length > 0 && (
            <SimpleChart
              title="Xu H∆∞·ªõng Doanh Thu Theo Th√°ng"
              type="line"
              data={revenueAnalytics.monthlyTrend.map(trend => ({
                label: trend.monthName,
                value: trend.revenue
              }))}
              height={300}
            />
          )}
        </>
      )}
    </div>
  );

  const renderServicesTab = () => (
    <div className="space-y-6">
      {servicePerformance.length > 0 && (
        <>
          <SimpleChart
            title="Hi·ªáu Su·∫•t D·ªãch V·ª• - S·ªë L∆∞·ª£ng ƒê·∫∑t L·ªãch"
            type="bar"
            data={servicePerformance.slice(0, 10).map((service, index) => ({
              label: service.serviceName,
              value: service.bookingsCount,
              color: `bg-${['blue', 'green', 'purple', 'orange', 'red'][index % 5]}-500`
            }))}
            height={400}
          />

          <SimpleChart
            title="Doanh Thu Theo D·ªãch V·ª•"
            type="pie"
            data={servicePerformance.slice(0, 5).map((service, index) => ({
              label: service.serviceName,
              value: service.totalRevenue,
              color: `hsl(${index * 72}, 70%, 50%)`
            }))}
            height={300}
          />

          {/* Service Performance Table */}
          <div className="bg-white rounded-xl border border-gray-200 overflow-hidden">
            <div className="p-6 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900">Chi Ti·∫øt Hi·ªáu Su·∫•t D·ªãch V·ª•</h3>
            </div>
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      D·ªãch V·ª•
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      S·ªë ƒê·∫∑t L·ªãch
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Doanh Thu
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      ƒê√°nh Gi√° TB
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Th·ªã Ph·∫ßn
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {servicePerformance.slice(0, 10).map((service, index) => (
                    <tr key={index}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                        {service.serviceName}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {service.bookingsCount}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {service.totalRevenue.toLocaleString()}ƒë
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {service.averageRating}/5 ‚≠ê
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {service.marketShare.toFixed(1)}%
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </>
      )}
    </div>
  );

  const renderHelpersTab = () => (
    <div className="space-y-6">
      {helperRankings.length > 0 && (
        <>
          <SimpleChart
            title="Top 10 Ng∆∞·ªùi Gi√∫p Vi·ªác - T·ªïng Thu Nh·∫≠p"
            type="bar"
            data={helperRankings.slice(0, 10).map((helper, index) => ({
              label: helper.helperName,
              value: helper.totalEarnings,
              color: `bg-${['blue', 'green', 'purple', 'orange', 'red'][index % 5]}-500`
            }))}
            height={400}
          />

          {/* Helper Rankings Table */}
          <div className="bg-white rounded-xl border border-gray-200 overflow-hidden">
            <div className="p-6 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900">B·∫£ng X·∫øp H·∫°ng Ng∆∞·ªùi Gi√∫p Vi·ªác</h3>
            </div>
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      H·∫°ng
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      T√™n
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      T·ªïng ƒê·∫∑t L·ªãch
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Ho√†n Th√†nh
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      T·ª∑ L·ªá Ho√†n Th√†nh
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      ƒê√°nh Gi√°
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Thu Nh·∫≠p
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {helperRankings.slice(0, 10).map((helper, index) => (
                    <tr key={helper.helperId}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                        #{index + 1}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div>
                          <div className="text-sm font-medium text-gray-900">{helper.helperName}</div>
                          <div className="text-sm text-gray-500">{helper.email}</div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {helper.totalBookings}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {helper.completedBookings}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {helper.completionRate.toFixed(1)}%
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {helper.averageRating}/5 ‚≠ê
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {helper.totalEarnings.toLocaleString()}ƒë
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </>
      )}
    </div>
  );

  const renderBookingsTab = () => (
    <div className="space-y-6">
      {bookingAnalytics && (
        <>
          {/* Booking Status Metrics */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6">
            <StatCard
              title="T·ªïng ƒê·∫∑t L·ªãch"
              value={bookingAnalytics.totalBookings}
              color="blue"
            />
            <StatCard
              title="Ch·ªù Duy·ªát"
              value={bookingAnalytics.pendingBookings}
              color="orange"
            />
            <StatCard
              title="ƒêang Th·ª±c Hi·ªán"
              value={bookingAnalytics.inProgressBookings}
              color="purple"
            />
            <StatCard
              title="Ho√†n Th√†nh"
              value={bookingAnalytics.completedBookings}
              color="green"
            />
            <StatCard
              title="ƒê√£ H·ªßy"
              value={bookingAnalytics.cancelledBookings}
              color="red"
            />
          </div>

          {/* Performance Metrics */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <StatCard
              title="Gi√° Tr·ªã TB/ƒê·∫∑t L·ªãch"
              value={`${bookingAnalytics.averageBookingValue.toLocaleString()}ƒë`}
              color="green"
            />
            <StatCard
              title="T·ª∑ L·ªá Ho√†n Th√†nh"
              value={`${bookingAnalytics.completionRate.toFixed(1)}%`}
              color="blue"
            />
            <StatCard
              title="T·ª∑ L·ªá H·ªßy"
              value={`${bookingAnalytics.cancellationRate.toFixed(1)}%`}
              color="red"
            />
          </div>

          {/* Peak Hours Chart */}
          {bookingAnalytics.peakHours.length > 0 && (
            <SimpleChart
              title="Gi·ªù Cao ƒêi·ªÉm ƒê·∫∑t L·ªãch"
              type="bar"
              data={bookingAnalytics.peakHours.map(hour => ({
                label: hour.timeRange,
                value: hour.bookingsCount
              }))}
              height={300}
            />
          )}

          {/* Popular Services */}
          {bookingAnalytics.popularServices.length > 0 && (
            <SimpleChart
              title="D·ªãch V·ª• Ph·ªï Bi·∫øn"
              type="pie"
              data={bookingAnalytics.popularServices.map((service, index) => ({
                label: service.serviceName,
                value: service.bookingsCount,
                color: `hsl(${index * 60}, 70%, 50%)`
              }))}
              height={300}
            />
          )}
        </>
      )}
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">B√°o C√°o Qu·∫£n Tr·ªã</h1>
              <p className="text-gray-600">T·ªïng quan v√† ph√¢n t√≠ch d·ªØ li·ªáu h·ªá th·ªëng</p>
            </div>
            <div className="flex items-center space-x-4">
              <PeriodSelector
                selectedPeriod={selectedPeriod}
                onPeriodChange={setSelectedPeriod}
              />
              <button
                onClick={() => router.push('/dashboard')}
                className="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors"
              >
                V·ªÅ Dashboard
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* Navigation Tabs */}
      <div className="bg-white border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <nav className="-mb-px flex space-x-8">
            {[
              { key: 'overview', label: 'T·ªïng Quan', icon: 'üìä' },
              { key: 'revenue', label: 'Doanh Thu', icon: 'üí∞' },
              { key: 'services', label: 'D·ªãch V·ª•', icon: 'üõ†Ô∏è' },
              { key: 'helpers', label: 'Ng∆∞·ªùi Gi√∫p Vi·ªác', icon: 'üë•' },
              { key: 'bookings', label: 'ƒê·∫∑t L·ªãch', icon: 'üìÖ' },
            ].map((tab) => (
              <button
                key={tab.key}
                onClick={() => setActiveTab(tab.key as any)}
                className={`py-4 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${
                  activeTab === tab.key
                    ? 'border-indigo-500 text-indigo-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <span>{tab.icon}</span>
                <span>{tab.label}</span>
              </button>
            ))}
          </nav>
        </div>
      </div>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {error && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
            <p className="text-red-600">{error}</p>
          </div>
        )}

        {loadingData ? (
          <div className="flex items-center justify-center py-20">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600"></div>
          </div>
        ) : (
          <>
            {activeTab === 'overview' && renderOverviewTab()}
            {activeTab === 'revenue' && renderRevenueTab()}
            {activeTab === 'services' && renderServicesTab()}
            {activeTab === 'helpers' && renderHelpersTab()}
            {activeTab === 'bookings' && renderBookingsTab()}
          </>
        )}
      </main>
    </div>
  );
} 